// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'actor/core.dart';
import 'actor/mission.dart';
import 'actor/model.dart';
import 'api/model.dart';
import 'bridge.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  RustStreamSink<bool> dco_decode_StreamSink_bool_Sse(dynamic raw);

  @protected
  RustStreamSink<List<NodeDevice>> dco_decode_StreamSink_list_node_device_Sse(
      dynamic raw);

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw);

  @protected
  RustStreamSink<MissionInfo?>
      dco_decode_StreamSink_opt_box_autoadd_mission_info_Sse(dynamic raw);

  @protected
  RustStreamSink<BigInt> dco_decode_StreamSink_usize_Sse(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  CoreConfig dco_decode_box_autoadd_core_config(dynamic raw);

  @protected
  MissionInfo dco_decode_box_autoadd_mission_info(dynamic raw);

  @protected
  NodeDevice dco_decode_box_autoadd_node_device(dynamic raw);

  @protected
  CoreConfig dco_decode_core_config(dynamic raw);

  @protected
  FileInfo dco_decode_file_info(dynamic raw);

  @protected
  FileState dco_decode_file_state(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  List<MissionFileInfo> dco_decode_list_mission_file_info(dynamic raw);

  @protected
  List<NodeDevice> dco_decode_list_node_device(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  LogEntry dco_decode_log_entry(dynamic raw);

  @protected
  MissionFileInfo dco_decode_mission_file_info(dynamic raw);

  @protected
  MissionInfo dco_decode_mission_info(dynamic raw);

  @protected
  MissionState dco_decode_mission_state(dynamic raw);

  @protected
  NodeDevice dco_decode_node_device(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  MissionInfo? dco_decode_opt_box_autoadd_mission_info(dynamic raw);

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  RustStreamSink<bool> sse_decode_StreamSink_bool_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<List<NodeDevice>> sse_decode_StreamSink_list_node_device_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<MissionInfo?>
      sse_decode_StreamSink_opt_box_autoadd_mission_info_Sse(
          SseDeserializer deserializer);

  @protected
  RustStreamSink<BigInt> sse_decode_StreamSink_usize_Sse(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  CoreConfig sse_decode_box_autoadd_core_config(SseDeserializer deserializer);

  @protected
  MissionInfo sse_decode_box_autoadd_mission_info(SseDeserializer deserializer);

  @protected
  NodeDevice sse_decode_box_autoadd_node_device(SseDeserializer deserializer);

  @protected
  CoreConfig sse_decode_core_config(SseDeserializer deserializer);

  @protected
  FileInfo sse_decode_file_info(SseDeserializer deserializer);

  @protected
  FileState sse_decode_file_state(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<MissionFileInfo> sse_decode_list_mission_file_info(
      SseDeserializer deserializer);

  @protected
  List<NodeDevice> sse_decode_list_node_device(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer);

  @protected
  MissionFileInfo sse_decode_mission_file_info(SseDeserializer deserializer);

  @protected
  MissionInfo sse_decode_mission_info(SseDeserializer deserializer);

  @protected
  MissionState sse_decode_mission_state(SseDeserializer deserializer);

  @protected
  NodeDevice sse_decode_node_device(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  MissionInfo? sse_decode_opt_box_autoadd_mission_info(
      SseDeserializer deserializer);

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_bool_Sse(
      RustStreamSink<bool> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_list_node_device_Sse(
      RustStreamSink<List<NodeDevice>> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_opt_box_autoadd_mission_info_Sse(
      RustStreamSink<MissionInfo?> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_usize_Sse(
      RustStreamSink<BigInt> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_core_config(
      CoreConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_mission_info(
      MissionInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_node_device(
      NodeDevice self, SseSerializer serializer);

  @protected
  void sse_encode_core_config(CoreConfig self, SseSerializer serializer);

  @protected
  void sse_encode_file_info(FileInfo self, SseSerializer serializer);

  @protected
  void sse_encode_file_state(FileState self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_list_mission_file_info(
      List<MissionFileInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_node_device(
      List<NodeDevice> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer);

  @protected
  void sse_encode_mission_file_info(
      MissionFileInfo self, SseSerializer serializer);

  @protected
  void sse_encode_mission_info(MissionInfo self, SseSerializer serializer);

  @protected
  void sse_encode_mission_state(MissionState self, SseSerializer serializer);

  @protected
  void sse_encode_node_device(NodeDevice self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_mission_info(
      MissionInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
