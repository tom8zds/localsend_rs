// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'actor/core.dart';
import 'actor/model.dart';
import 'bridge.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'session/model.dart';
import 'session/progress.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.0';

  @override
  int get rustContentHash => 1098754419;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateBridgeAcceptPending();

  Future<void> crateBridgeAnnounce();

  Future<void> crateBridgeCancelPending();

  Future<void> crateBridgeChangeConfig({required CoreConfig config});

  Future<void> crateBridgeChangePath({required String path});

  Future<void> crateBridgeClearMission();

  Stream<LogEntry> crateBridgeCreateLogStream();

  Stream<List<NodeDevice>> crateBridgeListenDevice();

  Stream<Progress> crateBridgeListenProgress({required String id});

  Stream<bool> crateBridgeListenServerState();

  Stream<SessionVm?> crateBridgeListenSession();

  Future<void> crateBridgeRestartServer();

  Stream<Progress> crateBridgeSendFile(
      {required String path, required NodeDevice node});

  Future<void> crateBridgeSetup(
      {required NodeDevice device, required CoreConfig config});

  Future<void> crateBridgeShutdownServer();

  Future<void> crateBridgeStartServer();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateBridgeAcceptPending() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeAcceptPendingConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeAcceptPendingConstMeta => const TaskConstMeta(
        debugName: "accept_pending",
        argNames: [],
      );

  @override
  Future<void> crateBridgeAnnounce() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeAnnounceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeAnnounceConstMeta => const TaskConstMeta(
        debugName: "announce",
        argNames: [],
      );

  @override
  Future<void> crateBridgeCancelPending() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeCancelPendingConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeCancelPendingConstMeta => const TaskConstMeta(
        debugName: "cancel_pending",
        argNames: [],
      );

  @override
  Future<void> crateBridgeChangeConfig({required CoreConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_core_config(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeChangeConfigConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeChangeConfigConstMeta => const TaskConstMeta(
        debugName: "change_config",
        argNames: ["config"],
      );

  @override
  Future<void> crateBridgeChangePath({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeChangePathConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeChangePathConstMeta => const TaskConstMeta(
        debugName: "change_path",
        argNames: ["path"],
      );

  @override
  Future<void> crateBridgeClearMission() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeClearMissionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeClearMissionConstMeta => const TaskConstMeta(
        debugName: "clear_mission",
        argNames: [],
      );

  @override
  Stream<LogEntry> crateBridgeCreateLogStream() {
    final s = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_entry_Sse(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeCreateLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateBridgeCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s"],
      );

  @override
  Stream<List<NodeDevice>> crateBridgeListenDevice() {
    final s = RustStreamSink<List<NodeDevice>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_node_device_Sse(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeListenDeviceConstMeta,
      argValues: [s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateBridgeListenDeviceConstMeta => const TaskConstMeta(
        debugName: "listen_device",
        argNames: ["s"],
      );

  @override
  Stream<Progress> crateBridgeListenProgress({required String id}) {
    final s = RustStreamSink<Progress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_StreamSink_progress_Sse(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeListenProgressConstMeta,
      argValues: [id, s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateBridgeListenProgressConstMeta => const TaskConstMeta(
        debugName: "listen_progress",
        argNames: ["id", "s"],
      );

  @override
  Stream<bool> crateBridgeListenServerState() {
    final s = RustStreamSink<bool>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_bool_Sse(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeListenServerStateConstMeta,
      argValues: [s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateBridgeListenServerStateConstMeta =>
      const TaskConstMeta(
        debugName: "listen_server_state",
        argNames: ["s"],
      );

  @override
  Stream<SessionVm?> crateBridgeListenSession() {
    final s = RustStreamSink<SessionVm?>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_opt_box_autoadd_session_vm_Sse(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeListenSessionConstMeta,
      argValues: [s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateBridgeListenSessionConstMeta => const TaskConstMeta(
        debugName: "listen_session",
        argNames: ["s"],
      );

  @override
  Future<void> crateBridgeRestartServer() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeRestartServerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeRestartServerConstMeta => const TaskConstMeta(
        debugName: "restart_server",
        argNames: [],
      );

  @override
  Stream<Progress> crateBridgeSendFile(
      {required String path, required NodeDevice node}) {
    final progSink = RustStreamSink<Progress>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_box_autoadd_node_device(node, serializer);
        sse_encode_StreamSink_progress_Sse(progSink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeSendFileConstMeta,
      argValues: [path, node, progSink],
      apiImpl: this,
    )));
    return progSink.stream;
  }

  TaskConstMeta get kCrateBridgeSendFileConstMeta => const TaskConstMeta(
        debugName: "send_file",
        argNames: ["path", "node", "progSink"],
      );

  @override
  Future<void> crateBridgeSetup(
      {required NodeDevice device, required CoreConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_node_device(device, serializer);
        sse_encode_box_autoadd_core_config(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeSetupConstMeta,
      argValues: [device, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeSetupConstMeta => const TaskConstMeta(
        debugName: "setup",
        argNames: ["device", "config"],
      );

  @override
  Future<void> crateBridgeShutdownServer() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeShutdownServerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeShutdownServerConstMeta => const TaskConstMeta(
        debugName: "shutdown_server",
        argNames: [],
      );

  @override
  Future<void> crateBridgeStartServer() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateBridgeStartServerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateBridgeStartServerConstMeta => const TaskConstMeta(
        debugName: "start_server",
        argNames: [],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<bool> dco_decode_StreamSink_bool_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<List<NodeDevice>> dco_decode_StreamSink_list_node_device_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<SessionVm?>
      dco_decode_StreamSink_opt_box_autoadd_session_vm_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Progress> dco_decode_StreamSink_progress_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CoreConfig dco_decode_box_autoadd_core_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_core_config(raw);
  }

  @protected
  NodeDevice dco_decode_box_autoadd_node_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_node_device(raw);
  }

  @protected
  SessionVm dco_decode_box_autoadd_session_vm(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_session_vm(raw);
  }

  @protected
  CoreConfig dco_decode_core_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return CoreConfig(
      port: dco_decode_u_16(arr[0]),
      interfaceAddr: dco_decode_String(arr[1]),
      multicastAddr: dco_decode_String(arr[2]),
      multicastPort: dco_decode_u_16(arr[3]),
      storePath: dco_decode_String(arr[4]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<NodeDevice> dco_decode_list_node_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_node_device).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<TaskVm> dco_decode_list_task_vm(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_task_vm).toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_i_32(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  NodeDevice dco_decode_node_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return NodeDevice(
      alias: dco_decode_String(arr[0]),
      version: dco_decode_String(arr[1]),
      deviceModel: dco_decode_String(arr[2]),
      deviceType: dco_decode_String(arr[3]),
      fingerprint: dco_decode_String(arr[4]),
      address: dco_decode_String(arr[5]),
      port: dco_decode_u_16(arr[6]),
      protocol: dco_decode_String(arr[7]),
      download: dco_decode_bool(arr[8]),
      announcement: dco_decode_bool(arr[9]),
      announce: dco_decode_bool(arr[10]),
    );
  }

  @protected
  SessionVm? dco_decode_opt_box_autoadd_session_vm(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_session_vm(raw);
  }

  @protected
  Progress dco_decode_progress(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Progress(
      progress: dco_decode_usize(arr[0]),
      total: dco_decode_usize(arr[1]),
    );
  }

  @protected
  SessionVm dco_decode_session_vm(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SessionVm(
      id: dco_decode_String(arr[0]),
      node: dco_decode_node_device(arr[1]),
      tasks: dco_decode_list_task_vm(arr[2]),
      status: dco_decode_status(arr[3]),
    );
  }

  @protected
  Status dco_decode_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return const Status_Pending();
      case 1:
        return Status_Transfer(
          startTime: dco_decode_U128(raw[1]),
        );
      case 2:
        return const Status_Finish();
      case 3:
        return Status_Fail(
          msg: dco_decode_String(raw[1]),
        );
      case 4:
        return const Status_Cancel();
      case 5:
        return const Status_Rejected();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TaskVm dco_decode_task_vm(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TaskVm(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      size: dco_decode_usize(arr[2]),
      status: dco_decode_status(arr[3]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<bool> sse_decode_StreamSink_bool_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<List<NodeDevice>> sse_decode_StreamSink_list_node_device_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<SessionVm?>
      sse_decode_StreamSink_opt_box_autoadd_session_vm_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Progress> sse_decode_StreamSink_progress_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CoreConfig sse_decode_box_autoadd_core_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_core_config(deserializer));
  }

  @protected
  NodeDevice sse_decode_box_autoadd_node_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_node_device(deserializer));
  }

  @protected
  SessionVm sse_decode_box_autoadd_session_vm(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_session_vm(deserializer));
  }

  @protected
  CoreConfig sse_decode_core_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_port = sse_decode_u_16(deserializer);
    var var_interfaceAddr = sse_decode_String(deserializer);
    var var_multicastAddr = sse_decode_String(deserializer);
    var var_multicastPort = sse_decode_u_16(deserializer);
    var var_storePath = sse_decode_String(deserializer);
    return CoreConfig(
        port: var_port,
        interfaceAddr: var_interfaceAddr,
        multicastAddr: var_multicastAddr,
        multicastPort: var_multicastPort,
        storePath: var_storePath);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<NodeDevice> sse_decode_list_node_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NodeDevice>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_node_device(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<TaskVm> sse_decode_list_task_vm(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TaskVm>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_task_vm(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_i_32(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        level: var_level,
        tag: var_tag,
        msg: var_msg);
  }

  @protected
  NodeDevice sse_decode_node_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_alias = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    var var_deviceModel = sse_decode_String(deserializer);
    var var_deviceType = sse_decode_String(deserializer);
    var var_fingerprint = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    var var_protocol = sse_decode_String(deserializer);
    var var_download = sse_decode_bool(deserializer);
    var var_announcement = sse_decode_bool(deserializer);
    var var_announce = sse_decode_bool(deserializer);
    return NodeDevice(
        alias: var_alias,
        version: var_version,
        deviceModel: var_deviceModel,
        deviceType: var_deviceType,
        fingerprint: var_fingerprint,
        address: var_address,
        port: var_port,
        protocol: var_protocol,
        download: var_download,
        announcement: var_announcement,
        announce: var_announce);
  }

  @protected
  SessionVm? sse_decode_opt_box_autoadd_session_vm(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_session_vm(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Progress sse_decode_progress(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_progress = sse_decode_usize(deserializer);
    var var_total = sse_decode_usize(deserializer);
    return Progress(progress: var_progress, total: var_total);
  }

  @protected
  SessionVm sse_decode_session_vm(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_node = sse_decode_node_device(deserializer);
    var var_tasks = sse_decode_list_task_vm(deserializer);
    var var_status = sse_decode_status(deserializer);
    return SessionVm(
        id: var_id, node: var_node, tasks: var_tasks, status: var_status);
  }

  @protected
  Status sse_decode_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return const Status_Pending();
      case 1:
        var var_startTime = sse_decode_U128(deserializer);
        return Status_Transfer(startTime: var_startTime);
      case 2:
        return const Status_Finish();
      case 3:
        var var_msg = sse_decode_String(deserializer);
        return Status_Fail(msg: var_msg);
      case 4:
        return const Status_Cancel();
      case 5:
        return const Status_Rejected();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TaskVm sse_decode_task_vm(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_size = sse_decode_usize(deserializer);
    var var_status = sse_decode_status(deserializer);
    return TaskVm(
        id: var_id, name: var_name, size: var_size, status: var_status);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_bool_Sse(
      RustStreamSink<bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_node_device_Sse(
      RustStreamSink<List<NodeDevice>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_list_node_device,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_opt_box_autoadd_session_vm_Sse(
      RustStreamSink<SessionVm?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_session_vm,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_progress_Sse(
      RustStreamSink<Progress> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_progress,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_core_config(
      CoreConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_core_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_node_device(
      NodeDevice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_node_device(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_session_vm(
      SessionVm self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_session_vm(self, serializer);
  }

  @protected
  void sse_encode_core_config(CoreConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.port, serializer);
    sse_encode_String(self.interfaceAddr, serializer);
    sse_encode_String(self.multicastAddr, serializer);
    sse_encode_u_16(self.multicastPort, serializer);
    sse_encode_String(self.storePath, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_node_device(
      List<NodeDevice> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_node_device(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_task_vm(List<TaskVm> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_task_vm(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_i_32(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_node_device(NodeDevice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.alias, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_String(self.deviceModel, serializer);
    sse_encode_String(self.deviceType, serializer);
    sse_encode_String(self.fingerprint, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_u_16(self.port, serializer);
    sse_encode_String(self.protocol, serializer);
    sse_encode_bool(self.download, serializer);
    sse_encode_bool(self.announcement, serializer);
    sse_encode_bool(self.announce, serializer);
  }

  @protected
  void sse_encode_opt_box_autoadd_session_vm(
      SessionVm? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_session_vm(self, serializer);
    }
  }

  @protected
  void sse_encode_progress(Progress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.progress, serializer);
    sse_encode_usize(self.total, serializer);
  }

  @protected
  void sse_encode_session_vm(SessionVm self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_node_device(self.node, serializer);
    sse_encode_list_task_vm(self.tasks, serializer);
    sse_encode_status(self.status, serializer);
  }

  @protected
  void sse_encode_status(Status self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Status_Pending():
        sse_encode_i_32(0, serializer);
      case Status_Transfer(startTime: final startTime):
        sse_encode_i_32(1, serializer);
        sse_encode_U128(startTime, serializer);
      case Status_Finish():
        sse_encode_i_32(2, serializer);
      case Status_Fail(msg: final msg):
        sse_encode_i_32(3, serializer);
        sse_encode_String(msg, serializer);
      case Status_Cancel():
        sse_encode_i_32(4, serializer);
      case Status_Rejected():
        sse_encode_i_32(5, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_task_vm(TaskVm self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_usize(self.size, serializer);
    sse_encode_status(self.status, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}
