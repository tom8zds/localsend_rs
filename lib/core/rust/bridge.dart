// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'actor/core.dart';
import 'actor/mission.dart';
import 'actor/model.dart';
import 'api/model.dart';
import 'frb_generated.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `_get_core`
// These types are ignored because they are not used by any `pub` functions: `CORE`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `initialize`

Future<void> setup({required NodeDevice device, required CoreConfig config}) =>
    RustLib.instance.api.crateBridgeSetup(device: device, config: config);

Stream<bool> listenServerState() =>
    RustLib.instance.api.crateBridgeListenServerState();

Future<void> startServer() => RustLib.instance.api.crateBridgeStartServer();

Future<void> shutdownServer() =>
    RustLib.instance.api.crateBridgeShutdownServer();

Future<void> restartServer() => RustLib.instance.api.crateBridgeRestartServer();

Future<void> changePath({required String path}) =>
    RustLib.instance.api.crateBridgeChangePath(path: path);

Future<void> changeConfig({required CoreConfig config}) =>
    RustLib.instance.api.crateBridgeChangeConfig(config: config);

Stream<List<NodeDevice>> listenDevice() =>
    RustLib.instance.api.crateBridgeListenDevice();

Stream<MissionInfo?> listenMission() =>
    RustLib.instance.api.crateBridgeListenMission();

Stream<BigInt> listenTaskProgress() =>
    RustLib.instance.api.crateBridgeListenTaskProgress();

Future<void> clearMission() => RustLib.instance.api.crateBridgeClearMission();

Future<void> cancelPending({required String id}) =>
    RustLib.instance.api.crateBridgeCancelPending(id: id);

Future<void> acceptPending({required String id}) =>
    RustLib.instance.api.crateBridgeAcceptPending(id: id);

Stream<LogEntry> createLogStream() =>
    RustLib.instance.api.crateBridgeCreateLogStream();

Future<void> announce() => RustLib.instance.api.crateBridgeAnnounce();
